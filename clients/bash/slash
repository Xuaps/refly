#!/usr/bin/env bash

scriptDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

configFile=$scriptDir/slash.conf
verbose=false

json_parser=$scriptDir/vendor/jq
man_viewer=$scriptDir/vendor/mad

function usage() {
cat << EOF
    usage: $0 [-h] [-v] [-f configFile] reference[:type[,type]...][:docset[,docset]...]
EOF
}

function bad_syntax() {
cat << EOF
    Bad syntax for reference, should be:

        reference[:type][:docset]

EOF
}

function process_args() {
    while getopts "f:hv" OPTION
    do
        case $OPTION in
            h)
                usage
                exit 1
                ;;
            f)
                configFile=$OPTARG
                ;;
            v)
                verbose=1
                ;;
            ?)
                usage
                exit
                ;;
        esac
    done
    
    shift $(($OPTIND-1))
    if [[ $# != 1 ]]
    then
        usage
        exit
    fi
}

get() {
    grep "$1" "$configFile" | awk '{ print $2 }'
}

split() {
    parts=($(echo "$1" | tr "$2" " "))
}

function get_query() {
    split $1 ":"

    num_parts=${#parts[@]}
    if [ $num_parts -lt 1 ] || [ $num_parts -gt 3 ]
    then
        bad_syntax
        exit 1
    fi

    reference=${parts[0]}
    types=${parts[1]}
    docsets=${parts[2]}

    local server=$(get server)
    local port=$(get port)

    local url="http://${server}:${port}/search?reference=${reference}"

    split $types ","
    for type in ${parts[@]}
    do
        if [[ $type != "," ]]
        then
            url="${url}&types=${type}"
        fi
    done

    split $docsets ","
    for docset in ${parts[@]}
    do
        if [[ $docset != "," ]]
        then
            url="${url}&docsets=${docset}"
        fi
    done

    query_url=$url
}

function show_results() {
    numResults=$(echo $1 | $json_parser '. | length')
    if [[ "$numResults" == "1" ]]
    then
        server=$(get server)
        port=$(get port)
        url=$(echo $1 | $json_parser '@uri "http://'${server}':'${port}'/get/\(.[0].docset)/\(.[0].type)/\(.[0].reference)"' | cut -d "\"" -f 2)
        content=$(curl -s ${url} | $json_parser '.content' | cut -d "\"" -f 2)
        echo -e $content | $man_viewer -
    fi
}

process_args $@ && get_query $1 && {
    results=$(curl -s $query_url)
    show_results "$results"
}
